class Solution:
    
    def isValid(self, i, j, n, m, grid):
        if 0 <= i < n and 0 <= j < m and grid[i][j] == '1':
            return True
        return False
    
    def numIslandsRec(self, i, j, n, m, grid):
        grid[i][j] = '0'
        
        if self.isValid(i+1, j, n, m, grid):
            self.numIslandsRec(i+1, j, n, m, grid)
        
        if self.isValid(i-1, j, n, m, grid):
            self.numIslandsRec(i-1, j, n, m, grid)
        
        if self.isValid(i, j+1, n, m, grid):
            self.numIslandsRec(i, j+1, n, m, grid)
        
        if self.isValid(i, j-1, n, m, grid):
            self.numIslandsRec(i, j-1, n, m, grid)
    
    def numIslands(self, grid):
        n = len(grid)
        m = len(grid[0])
        ans = 0
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == '1':
                    ans += 1
                    self.numIslandsRec(i, j, n, m, grid)
        
        return ans



link: https://leetcode.com/problems/number-of-islands/description/