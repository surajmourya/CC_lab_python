from collections import deque
from typing import List, Tuple

class Solution:
    
    # Helper function to check if a cell is valid for rotting
    def isValid(self, i: int, j: int, n: int, m: int, grid: List[List[int]]) -> bool:
        return 0 <= i < n and 0 <= j < m and grid[i][j] == 1
    
    def orangesRotting(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        
        fresh = 0
        time = 0
        q = deque()
        
        # Step 1: Initialize the queue with all the rotten oranges and count the fresh oranges
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 2:
                    q.append((i, j))  # Add rotten orange coordinates to the queue
                elif grid[i][j] == 1:
                    fresh += 1  # Count fresh oranges
        
        # If there are no fresh oranges, return 0
        if fresh == 0:
            return 0
        
        # Step 2: BFS to rot the fresh oranges
        while q:
            size_q = len(q)
            temp = 0
            
            for _ in range(size_q):
                x1, y1 = q.popleft()
                
                # 4 possible directions (up, down, left, right)
                directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
                
                for dx, dy in directions:
                    x = x1 + dx
                    y = y1 + dy
                    
                    # If the adjacent cell is a fresh orange, rot it
                    if self.isValid(x, y, n, m, grid):
                        temp += 1
                        grid[x][y] = 2
                        q.append((x, y))
            
            # If any fresh oranges were rotted in this iteration, increment time
            if temp != 0:
                time += 1
        
        # Step 3: Check if any fresh oranges are still left
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    return -1  # If there are fresh oranges left, return -1
        
        return time  # Return the total time taken to rot all the oranges
